services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 1234
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - event-network

  gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    command: npm run start:dev
    container_name: gateway-server
    restart: no
    ports:
      - "3004:3004"
    volumes:
      - .:/var/app
#      - ./gateway-server:/var/app  # 로컬 코드를 컨테이너 내부로 마운트
#      - var/app/node_modules      # node_modules는 컨테이너 내부 것 사용
    env_file:
      - /gateway-server/.env
    depends_on:
      - mongodb
    networks:
      - event-network

  auth-server:
    build:
      context: ./auth-server
      dockerfile: Dockerfile
    command: npm run start:dev
    container_name: auth-server
    restart: no
    ports:
      - "3001:3001"
    volumes:
      - .:/var/app
#      - ./auth-server:/var/app  # 로컬 코드를 컨테이너 내부로 마운트
#      - var/app/node_modules      # node_modules는 컨테이너 내부 것 사용
    env_file:
      - /auth-server/.env
    depends_on:
      - mongodb
    networks:
      - event-network

  event-server:
    build:
      context: ./event-server
      dockerfile: Dockerfile
    command: npm run start:dev
    container_name: event-server
    restart: no
    ports:
      - "3002:3002"
    volumes:
      - .:/var/app
    env_file:
      - /event-server/.env
    depends_on:
      - mongodb
    networks:
      - event-network

networks:
  event-network:
    driver: bridge

volumes:
  mongodb_data: